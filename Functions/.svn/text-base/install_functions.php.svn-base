<?php
if (file_exists("Commun/ftp.php")) {
  require_once  "Commun/ftp.php";
}
else if (file_exists("../Commun/ftp.php")) {
  require_once  "../Commun/ftp.php";
}

$fileINstallConfig="config/install_config.xml";
if (!file_exists($fileINstallConfig)) {
  $fileINstallConfig="../config/install_config.xml";
  if (!file_exists($fileINstallConfig)) {
    $fileINstallConfig="../install/config/install_config.xml";
    if (!file_exists($fileINstallConfig)) {
      echo "erreur pas de fichier d'install trouve....";
      exit -1;
    }
  }
}
extractXMLToArray($fileINstallConfig,"INS");

define("REP_INSTALL",$INS_REP_INSTALL);
define("PROJET",$INS_PROJET);
define("FTP_URL",$INS_FTP_URL);
define("FTP_USER",$INS_FTP_USER);
define("FTP_PASS",$INS_FTP_PASS);

/**
 * lecture de la version en cours.
 */
function returnVersion() {
  $tabFile=searchFiles("..",".version");

  $version="No version ????";
  if (sizeof($tabFile) > 0) {
    if (file_exists("../".$tabFile[0])) {
      $version = file_get_contents("../".$tabFile[0]);
    }
  }
  return chop($version);
}

/**
 * modification de la version
 * @param unknown_type $version
 */
function modifVersion($version) {
  if ($f = fopen("../.version","w")) {
    fwrite($f,$version."\n");
    fclose($f);
  }
}

/**
 * ecrutire  de la trace de l'install
 * @param $phase
 * @param $texte
 */
function tracePhase($phase,$texte) {
  if ($f = fopen(REP_INSTALL."/$phase.log","a+")) {
    fwrite($f,$texte."<br/>\n");
    fclose($f);
  }
}
/**
 * sauvgarde d'un texte dans un fichier sous install
 * @param unknown_type $texte
 * @param unknown_type $file
 */
function saveToFile($texte, $file) {
  //echo "ecriture dans ".REP_INSTALL."/".$file;
  if (!file_put_contents(REP_INSTALL."/".$file,$texte)) {
    return implode(error_get_last());
  }
  else {
    $tabTmp = explode('.',$file);
    return $tabTmp[0];
  }
}

/**
 * trace des erreurs
 * @param unknown_type $phase
 * @param unknown_type $erreur
 */
function traceError($phase, $erreur) {
  tracePhase($phase,"<span class='error'>$erreur</span>");
}

function initTracePhase($phase,$texte) {
  saveToFile($texte."<br/>\n", "$phase.log");
  /*  if ($f = fopen(REP_INSTALL."/$phase.log","w")) {
   fwrite($f,$texte."<br/>\n");
   fclose($f);
   }*/
}

/**
 * retour du log
 * @param unknown_type $phase
 */
function returnLogPhase($phase) {
  $tab = array();
  $texte=file_get_contents(REP_INSTALL."/$phase.log");
  $dateFile=filectime(REP_INSTALL."/$phase.log");
  $tab[$phase]="Fichier  du ".date("d/m/Y H:i:s",$dateFile)."<br/>".$texte;
  return $tab;
}




/**
 * recuperation de la deniere version
 * @param unknown_type $version
 */
function voirPatch($version) {

  $file=PROJET."-patch-".$version."-*.zip";
  $source_file="livraison/$file";
  //  $source_file="livraison/romael_website-patch-$version-*.zip";

  $versionNext="Pas de mise a jour possible [".phpversion()."]";

  if (phpVersionDouble() >= 5.2) {
    $ftp = new ftp(FTP_URL,21,FTP_USER,FTP_PASS);
    $tab=$ftp->liste_fichiers_mask($source_file,false);
    $ftp->quit();
    $versionNext="Pas de nouvelle version dispo...";
    //print_r($tab);
    if (sizeof($tab)>0) {
      $tabTmp=explode('-',basename($tab[0]));
      $versionNext=preg_replace("[.zip]","",$tabTmp[3]);
    }
  }

  return $versionNext;
}

/**
 * recuperation de la deniere version
 * @param unknown_type $version
 */
function recupLivraison($versionPrec,$version) {

  $file=PROJET."-patch-$versionPrec-$version.zip";
  $source_file="livraison/$file";
  $destination_file=REP_INSTALL."/$file";

  $suite=true;

  if (!is_dir(REP_INSTALL)) {
    if (!mkdir(REP_INSTALL)) {
      $erreur=error_get_last();
      $suite=false;
    }
  }
  if ($suite) {
    if (phpVersionDouble() >= 5.2) {

      $erreur="Recuperation de $source_file";
      $ftp = new ftp(FTP_URL,21,FTP_USER,FTP_PASS);
      try {
        $ftp->recuperer($source_file,$destination_file);
      }
      catch(ErrorException $e) {
        $erreur=$e;
      }
      $ftp->quit();
    }
  }
  return $erreur;
}

function appelPhase() {
  $etapes =lecturePhasesInstall();
  $tabRetour=array();
  foreach ($etapes as $key => $val) {
    if ($val != "ok") {
      //echo REP_INSTALL."/".$key."/saisie.php";
      $retour[$key]="";
      if (file_exists(REP_INSTALL."/".$key."/saisie.php")) {
        $retour[$key]="saisie";
      }
      // on arrete pour un retour sur la page
      break;
    }
  }

  return $retour;
}



// install
function installPatch($version) {
  $etapes =lecturePhasesInstall();
  $erreur="";
  $action=false;
  foreach ($etapes as $key => $val) {
    if ($val != "ok") {
      $action=true;
      $erreur = call_user_func($key,$version);
      if (!$erreur) {
        $etapes[$key]="ok";
      }
      else {
        $etapes[$key]="erreur";
      }
      // on arrete pour un retour sur la page
      break;
    }
  }
  if (!$action) {
    $erreur="END";
    $tabRetour["END"]="END";
  }
  else {

    $tabRetour[$key]=utf8Encode($erreur);;
  }
  //print_r($etapes);
  ecriturePhases($etapes);

  return $tabRetour;
}
// --------------------------------------------
function unzip($version) {

  $phase="unzip";
  $erreur=null;
  initTracePhase($phase,"<div class='tittab'>Decompression de l'archive.</div>");

  if (chdir(REP_INSTALL)) {
    if ($f=opendir('.')) {
      $tabFile= glob(PROJET."*.zip");
      $file=$tabFile[0];
      tracePhase($phase,"Fichier ".$file."");
      // unzip du patch et retour pour phase suivante.
      $zip = new ZipArchive;
      if ($zip->open($file)) {
        if (!$zip->extractTo("./")) {
          $erreur = implode(",", error_get_last());
          traceError($phase,$erreur);
        }
        $zip->close();
      }
      else {
        $erreur = implode(",", error_get_last());
        traceError($phase,$erreur);
      }
    }
    else {
      $erreur = implode(",", error_get_last());
      traceError($phase,$erreur);
    }
  }
  else {
    $erreur="Repertoire non trouvé...";
  }
  return $erreur;
}

/**
 * mise a jour de l'envuirronement
 * @param unknown_type $version
 */
function env($version) {
  $erreur="";

  $phase="env";
  $tabData=lectureDataSaisie($phase);

  // si il existe des script sous ../install/patch/env
  $repTravail=REP_INSTALL."/env";
  if (is_dir($repTravail)) {
    initTracePhase($phase,"<div class='tittab'>Traitement pour l'environnement.</div>");
    // taille - 2 . et ..
    $listFic=scandir($repTravail);
    tracePhase($phase,"Travail sur ".(sizeof($listFic)-2)." fichier(s) ");

    foreach ($listFic as $ficConfig) {
      if ($ficConfig != "." && $ficConfig != ".." && $ficConfig != "saisie.php" ) {
        tracePhase($phase,"env : $ficConfig ");
        include $repTravail."/".$ficConfig;
        tracePhase($phase,"Fin  : $ficConfig ");
      }
    }
    //$erreur="en DEV";
    tracePhase($phase,"Fin.....");
  }
  else {
    initTracePhase($phase,"Pas de mise a jour de l'environnement.");
  }
  return $erreur;

}

function sql($version) {
  $erreur="";
  // si il existe des script sous ../install/patch/sqlScript
  $phase="sql";

  $repTravail=REP_INSTALL."/sql";
  if (is_dir($repTravail)) {

    initTracePhase($phase,"<div class='tittab'>Traitement des sql.</div>");

    $listFic=scandir($repTravail);
    tracePhase($phase,"Travail sur ".(sizeof($listFic)-2)." fichier(s) ");

    $fileConfig="connexions_config.xml";
    if (file_exists("../config/$fileConfig")) {
      $tabCfg=XMLToArray("../config/$fileConfig");

      if(!NO_DATA_BASE) {

        foreach ($listFic as $ficSql) {
          if ($ficSql != "." && $ficSql != ".." && $ficSql != "saisie.php" ) {

            // modification du prefixe
            tracePhase($phase,"Script : $ficSql");
            $sql=file_get_contents($repTravail."/".$ficSql);
            $sql=preg_replace("[--CFG_PREFIXE--]",CFG_PREFIXE_TABLE, $sql);
            $sql=preg_replace("[--CFG_SGBD_NAME--]",$tabCfg['SGBD']['NAME_SGBD']['value'], $sql);
            $sql=preg_replace("[--CFG_SGBD_USER--]",$tabCfg['SGBD']['USER_SGBD']['value'], $sql);
            $sql=preg_replace("[--CFG_SGBD_PASS--]",$tabCfg['SGBD']['PASS_SGBD']['value'], $sql);

            $tabSql=explode(';',$sql);

            foreach ($tabSql as $valSql) {
              if (trim($valSql)) {
                // mysql exec
                $txtPlus="";
                if (!mysql_query($valSql)) {
                  $erreur=$ficSql.":".mysql_error();
                  traceError($phase,$erreur);
                  $txtPlus="N";
                }
                tracePhase($phase,"requete : <pre>".substr($valSql,0,100)."</pre>..........");
              }
            }
            tracePhase($phase,$txtPlus."OK pour $ficSql");

          }
        }
      }
      else {
        $erreur=NO_DATA_BASE;
        traceError($phase,"le fichier $fileConfig introuvable...");

      }
    }
    else {
      $erreur="fichier de config introuvable.....";
      traceError($phase,"le fichier $fileConfig introuvable...");
    }

    //    $erreur="en DEV";
    tracePhase($phase,"Fin.....");
  }
  else {
    initTracePhase($phase,"Pas de mise a jour sql.");
  }

  return $erreur;
}

/**
 * traitement des fichier de config
 * reprise des value du fichier present.
 * copie de svg pendant le traitement.
 * @param unknown_type $version
 */
function config($version) {
  $erreur="";
  // si il existe des script sous ../install/patch/config_defaut
  $phase="config";
  $repTravail=REP_INSTALL."/config";
  $repCible="../config";
  if (is_dir($repTravail)) {
    initTracePhase($phase,"<div class='tittab'>Traitement de la config.</div>");

    $listFic=scandir($repTravail);
    tracePhase($phase,"Travail sur ".(sizeof($listFic)-2)." fichier(s) ");

    foreach ($listFic as $ficConfig) {
      $tabTmp=explode(".",$ficConfig);
      $ext=$tabTmp[1];

      if ($ficConfig != "." && $ficConfig != ".." && $ficConfig != "saisie.php") {
        // recherche des fichiers de config des rubriques
        $oneFile=false;
        if ($ext == "xml") {
          $tabFic=explode("_",$ficConfig);
          $ficSearch=$tabFic[0]."_";
          
          if ($ficSearch == "config_") {
          	$ficSearch=$ficConfig;
          }
          //echo "recherche de ".$tabFic[0]."_";
          $tabFileConfig = searchFiles("../config", $ficSearch);
          //print_r($tabFileConfig);
          foreach ($tabFileConfig as $ficConfigCible) {
            $oneFile=true;
            //if (file_exists($repCible."/".$ficConfig) && $ext == "xml") {
            // lecture du fichier recu
            $tabXmlNew = XMLToArray($repTravail."/".$ficConfig);
            //print_r($tabXmlNew);

            $tabXmlOld= XMLToArray($repCible."/".$ficConfigCible);
            //print_r($tabXmlOld);
            copy($repCible."/".$ficConfigCible,$repCible."/".$ficConfigCible.".svg");

            //$tabDiff=array_diff_assoc($tabXmlOld, $tabXmlNew);

            tracePhase($phase,"Diff sur $ficConfigCible ");

            // lecture du nouveau fichier XML
            // recuperation des valeurs de value
            lectureConfigRecur( $tabXmlNew, $tabXmlOld);

            //print_r($tabXmlNew);
            $xmlArray = new XMLToArray($repCible."/".$ficConfigCible);
            $xmlArray->saveXML($xmlArray->array_to_xml2($tabXmlNew,"ROOT"));

            if (!file_exists($repCible."/".$ficConfigCible) || filesize($repCible."/".$ficConfigCible) == 0) {
              $erreur = "Creation du $ficConfigCible impossible !!!!";
              traceError($phase,$erreur);
              copy($repCible."/".$ficConfigCible.".svg",$repCible."/".$ficConfigCible);
            }
            else {
              tracePhase($phase,"OK pour $ficConfigCible");
            }
            unlink($repCible."/".$ficConfigCible.".svg");
          }
        }

        if (!$oneFile) {
          // copy directe du fichier
          if (!copy($repTravail."/".$ficConfig,$repCible."/".$ficConfig)) {
            $erreur="Copy du ".$repTravail."/".$ficConfig." vers ".$repCible."/".$ficConfig." impossible...";
            traceError($phase,$erreur);
          }
          else {
            tracePhase($phase,"Ajout de $ficConfig");
          }
        }
      }
    }
    //$erreur="en DEV";
    tracePhase($phase,"Fin.....");
  }
  else {
    initTracePhase($phase,"Pas de mise a jour de la config.");
  }
  return $erreur;
}

/**
 *
 * @param unknown_type $tabNew
 * @param unknown_type $tabOld
 */
function lectureConfigRecur(&$tabNew, $tabOld) {
  foreach ($tabNew  as $key => $val) {
    if (!isset($val['value'])) {
      // si la clef n'existe pas, pas de recherche des valeurs
      if (isset($tabOld[$key])) {
        lectureConfigRecur($tabNew[$key], $tabOld[$key]);
      }
    }
    else {
      // lecture de la valeur dans le tabOld
      if (isset($tabOld[$key])) {
        $tabNew[$key]['value']=$tabOld[$key]['value'];
      }
    }
  }
}

/**
 *
 * @param unknown_type $version
 */
function php($version) {
  $erreur="";
  // si il existe des script sous ../install/php
  $phase="php";
  $repTravail=REP_INSTALL."/php";
  if (is_dir($repTravail)) {
    initTracePhase($phase,"<div class='tittab'>Traitement des sources.</div>");
    $listFic=scandir($repTravail);
    tracePhase($phase,"Travail sur ".(sizeof($listFic)-2)." fichier(s) ");
    
    $tabTrace=recurse_copy("../install/php/","../");
    
    foreach($tabTrace as $val) {
      tracePhase($phase,$val);
    }
    
  }
  else {
    initTracePhase($phase,"Pas de mise a jour des sources.");
  }
  return $erreur;
}

function plus($version) {
  $erreur="";

  $phase="plus";
  $tabData=lectureDataSaisie($phase);

  // si il existe des script sous ../install/plus
  $repTravail=REP_INSTALL."/plus";
  if (is_dir($repTravail)) {
    initTracePhase($phase,"<div class='tittab'>Traitement pour plus.</div>");
    // taille - 2 . et ..
    $listFic=scandir($repTravail);
    tracePhase($phase,"Travail sur ".(sizeof($listFic)-2)." fichier(s) ");

    foreach ($listFic as $ficConfig) {
      if ($ficConfig != "." && $ficConfig != ".." && $ficConfig != "saisie.php" ) {
        tracePhase($phase,"plus : $ficConfig ");
        include $repTravail."/".$ficConfig;
        tracePhase($phase,"Fin  : $ficConfig ");
      }
    }


  }
  else {
    initTracePhase($phase,"Pas de mise a jour de plus.");
  }
  // suppression de ajax.js
  if (file_exists("../JS/ajax.js")) {
    unlink("../JS/ajax.js");
    tracePhase($phase,"Suppression de ../JS/ajax.js");
  }

  //$erreur="en DEV";
  tracePhase($phase,"Fin.....");

  return $erreur;
}

/**
 * lecture de l'etat des phases de l'installation
 * par defaut tous a init
 */
function lecturePhasesInstall() {
  $etapes=array("unzip"=>"init",
  				"env"=>"init",
                "sql"=>"init",
                "config"=>"init",
                "php"=>"init",
                "plus"=>"init");
  $fileInstall = REP_INSTALL."/.install";
  if (file_exists($fileInstall)) {
    if ($f = fopen($fileInstall,"r")) {
      while(!feof($f)) {
        $tab=fread($f,1024);
        $lignes=explode("\n",$tab);
        foreach ($lignes as $ligne) {
          if (strlen(trim($ligne)) > 0) {
            $tabTmp=explode("=",$ligne);
            if (isset($etapes[$tabTmp[0]])) {
              $etapes[$tabTmp[0]]=$tabTmp[1];
            }
          }
        }
      }
      fclose($f);
    }
  }
  return $etapes;
}

/**
 * lecture de data de saisie
 */
function lectureDataSaisie($phase) {
  $fileInstall = REP_INSTALL."/$phase.saisie";
  if (file_exists($fileInstall)) {
    if ($f = fopen($fileInstall,"r")) {
      while(!feof($f)) {
        $tab=fread($f,1024);
        $lignes=explode("\n",$tab);
        foreach ($lignes as $ligne) {
          if (strlen(trim($ligne)) > 0) {
            $tabTmp=explode("=",$ligne);
            $etapes[$tabTmp[0]]=$tabTmp[1];

          }
        }
      }
      fclose($f);
    }
  }
  return $etapes;
}
/**
 *  mise a jour des
 * @param unknown_type $etapes
 */
function ecriturePhases($etapes) {
  $fileInstall = REP_INSTALL."/.install";
  if ($f = fopen($fileInstall,"w")) {
    foreach ($etapes as$key => $val) {
      fwrite($f,$key."=".$val."\n");
    }
    fclose($f);
  }
}

function lecturePhaseInstall($phase) {
  $etapes = lecturePhasesInstall();
  if (isset($etapes['phase'])) {
    return $etapes['phase'];
  }
  else {
    return "init";
  }
}


/*function makeReturnInstall($pbInstall,$texteReturn,$etape) {
 $etapesInstall =array("init","config","repertoire","sql","php");
 // tableau de retour
 $tabReturn['etapeNext']=$etapesInstall[$etape+1];
 $tabReturn['texte']="";

 if ($pbInstall) {
 $tabReturn['etapeNext']=-1;
 $etape=-1;
 $tabReturn['texte']=$texteReturn;
 }
 else {
 if ($etape >= sizeof($etapesInstall)) {
 $tabReturn['etapeNext']=0;
 $tabReturn['texte']="";
 }
 else {
 $tabReturn['etapeNext']=1;
 $tabReturn['texte']=$texteReturn;
 }
 }

 $fileInstall = "../.install";
 if ($etape > 0) {
 if ($f = fopen($fileInstall,"w")) {
 fwrite($f,$etape);
 fclose($f);
 }
 }

 return $tabReturn;

 }*/

/*
 function verifInstall() {
 $etapesInstall =array("init","config","repertoire","sql","php");
 // recherche du fichier .install, qui contient le niveau d'install
 // et la derniere version
 $fileInstall = REP_INSTALL;
 if (file_exists($fileInstall)) {
 if ($f = fopen($fileInstall,"r")) {
 while(!feof($f)) {
 $etape=fread($f,1024);
 }
 fclose($f);
 }
 else {
 $etape=array_search('init', $etapesInstall);
 }
 }

 $texteReturn="";
 $pbInstall=false;

 $repInstall="../install";
 // si le repretoire d'install n'existe pas on ne peut pas mettre a jour
 if ($d = dir($repInstall)) {

 // verification de la presence du repertoire config
 if ($etape < array_search('config', $etapesInstall)) {

 if (!$d = dir("../config")) {
 // 	copie du repertoire config_defaut de install vers .
 $texteReturn="Mise en place de la configuration par defaut.";
 recurse_copy($repInstall."/config_defaut","../config");
 }
 else {
 $texteReturn="Verification des configurations.";
 //$pbInstall=true;
 }
 $etape=array_search('config', $etapesInstall);
 return makeReturnInstall($pbInstall,$texteReturn, $etape);
 }

 // verification de la presence du repertoire photos
 if ($etape < array_search('repertoire', $etapesInstall)) {
 if (!$d = dir("../photos")) {
 $creation=true;
 $texteReturn.="photos, ";
 mkdir("../photos");
 }
 elseif (!$d = dir("../userfiles")) {
 $creation=true;
 $texteReturn.="userfiles, ";
 mkdir("../userfiles/Images/Site/Icones",'0002',true);
 mkdir("../userfiles/presentation",'0002',true);
 }

 if ($creation) {
 $texteReturn="Creation de : ".$texteReturn;
 }
 $etape=array_search('repertoire', $etapesInstall);
 return makeReturnInstall($pbInstall,$texteReturn, $etape);
 }

 // passage des scripts sql
 if ($etape < array_search('sql', $etapesInstall)) {

 // test existance de la base

 // creation de la base

 // modification de la base
 $etape=array_search('sql', $etapesInstall);
 return makeReturnInstall($pbInstall,$texteReturn, $etape);
 }

 // passage des sources php
 if ($etape < array_search('php', $etapesInstall)) {

 // copi des sources de l'install
 $etape=array_search('php', $etapesInstall);
 return makeReturnInstall($pbInstall,$texteReturn, $etape);
 }

 // fin install
 // suppression du repertoire install
 remove_dir($repInstall,"R");
 }

 return makeReturnInstall(false,"", sizeof($etapesInstall));
 }
 */

?>