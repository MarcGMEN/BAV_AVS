<?
//require "SO_Post_Get.php";

session_start();
$searchFile="Commun/xml.php";
if (file_exists($searchFile)) {
	require $searchFile;
} else if (file_exists("../$searchFile")) {
	require "../$searchFile";
}

if (isset($_GET)) {
	extract($_GET,EXTR_PREFIX_ALL,'GET');
}
if (isset($_POST)) {
	extract($_POST,EXTR_PREFIX_ALL,'GET');
}
if (isset($_COOKIE)) {
	extract($_COOKIE,EXTR_PREFIX_ALL,'COOKIE');
}
if (isset($_FILES)) {
	extract($_FILES,EXTR_PREFIX_ALL,'FILE');
}


// extraction des donnes de config du site en variables globales
extractXMLToArray('config/config_site.xml',"CFG");
extractXMLToArray('config/connexions_config.xml',"CFG");

extractXMLToArray('config/membre_config.xml',"membre");

define("CFG_PREFIXE_TABLE",$CFG_PREFIXE_SGBD);
define("CFG_ADDSLASHES",$CFG_ADDSLASHES);
define("CFG_UTF8_AJAX",$CFG_UTF8_AJAX);

define("CFG_REP_IMAGE_SITE","userfiles/Images/Site");

define("NO_DATA_BASE","");
$id_db = mysql_connect($CFG_URL_SGBD,$CFG_USER_SGBD,$CFG_PASS_SGBD  );
if (!$id_db) {
	if (!isInstall()) {
		define("ERREUR_DATA_BASE",mysql_error());

	}
}
else {
	if (!mysql_select_db($CFG_NAME_SGBD)) {
		if (!isInstall()) {
			define("ERREUR_DATA_BASE",mysql_error());
		}
		//echo "acces impossible sur  $CFG_URL_SGBD:$CFG_NAME_SGBD";
		define("NO_DATA_BASE","acces impossible sur  $CFG_URL_SGBD:$CFG_NAME_SGBD");
		//}
	}
}

function filAriane($niv_page, $rubSelect,$titre="") {
	// si page de niveau 1
	// 	raz du fil d'ariane
	if ($niv_page > 0) {
		$titreUrl= $titre!="" ? $titre : $rubSelect['rub_libelle'];
		$tabUrl=array($titreUrl=>$_SERVER['REQUEST_URI']);

		$indexFin=$niv_page-1;
		if ($niv_page==1) {
			$_SESSION['filAriane']=array();
		}
		for ($i = 0; $i < $niv_page-1; $i++) {
			$tabTmp[$i]=$_SESSION['filAriane'][$i];
		}
		$tabTmp[$indexFin]=$tabUrl;

		$_SESSION['filAriane']=$tabTmp;
	}

	return $_SESSION['filAriane'];
}


/*********************************************************************************/
/*********************************************************************************/
/*********************************************************************************/
/*********************************************************************************/
/*********************************************************************************/
/*********************************************************************************/
function backup($dbhost,$dbuser,$dbpass,$dbname,$force=false,$repBase="") {

	require_once($repBase.'Commun/mysqldump.class.php'); //Location Of Class File.

	$drop_table_if_exists = false; //Add MySQL 'DROP TABLE IF EXISTS' Statement To Output?
	$version2 = '1.1.2'; //Script Version.

	// sauvegarde journaliere
	$dateToday = date("Ymd");
	$nameBackup=$repBase."backup/".$dbname."_".date("Ymd").".sql.zip";
	if (!file_exists($nameBackup) || $force) {
		// recherche avec .sql
		$nameBackup=$repBase."backup/".$dbname."_".date("Ymd").".sql";
		if (!file_exists($nameBackup) || $force) {
			// connection OK
			if (!is_dir($repBase."backup")) {
				if (!mkdir($repBase."backup",0777,true)) {
					print_r(error_get_last());
					echo "errror creation  backup";
				}
			}

			$writer="";

			$backup = new MySQLDump();
			$backup->droptableifexists = $drop_table_if_exists;
			$backup->connect($dbhost,$dbuser,$dbpass,$dbname); //Connect To Database
			if (!$backup->connected) { die('Error: '.$backup->mysql_error); } //On Failed Connection, Show Error.
			$backup->list_tables(); //List Database Tables.
			$broj = count($backup->tables); //Count Database Tables.

			for ($i=0;$i<$broj;$i++) {
				$table_name = $backup->tables[$i]; //Get Table Names.
				$backup->dump_table($table_name); //Dump Data to the Output Buffer.
				$writer.=$backup->output;
			}
			file_put_contents($nameBackup, $writer);

			if (phpVersionDouble() >= 5.2) {
				$zip =new ZipArchive();
				if ($zip->open($nameBackup.".zip",ZIPARCHIVE::OVERWRITE) === TRUE) {
					$zip->addFile($nameBackup, basename($nameBackup));
					$zip->close();
					unlink($nameBackup);
				}
				else {
					print_r(error_get_last());
				}
			}
		}
	}
}
function recupEnumToArray($table, $champ) {
	$query_EnumList = "DESCRIBE $table '$champ'";
	$EnumList = mysql_query($query_EnumList) or die(mysql_error());
	$row_EnumList = mysql_fetch_assoc($EnumList);

	$str = preg_replace("[enum\(]",'',$row_EnumList['Type']);
	$str1 = preg_replace("[\)]",'',$str);
	$str = preg_replace("[\']",'',$str1);
	return preg_split("[,]",$str);
}

function makeURL_GET($tabPost,$params="") {
	$mod = isset($tabPost['mod']) ? $tabPost['mod']  : "";
	$rub = isset($tabPost['rub']) ? $tabPost['rub']  : "";
	$option = isset($tabPost['option']) ? $tabPost['option']  : "";
	$retour ="index.php?mod=$mod&rub=$rub";
	$retour.=$option != "" ? "&option=$option" : "";
	$retour.=$params != "" ? "&$params" : "";

	return $retour;
}

function makeURL_FORM($tabPost) {
	$mod = isset($tabPost['mod']) ? $tabPost['mod']  : "";
	$rub = isset($tabPost['rub']) ? $tabPost['rub']  : "";
	$option = isset($tabPost['option']) ? $tabPost['option']  : "";?>
<input type="hidden" name="mod" value="<?=$mod?>" />
<input type="hidden" name="rub" value="<?=$rub?>" />
<input
	type="hidden" name="option" value="<?=$option?>" />
	<?php
}

function formateDateMYSQLtoFR($dateMysql) {
	$date="";
	if (strlen(trim($dateMysql)) > 0 ) {
		$tab_date = explode(' ',$dateMysql);
		$tab_date1 = explode('-',$tab_date[0]);
		$date=$tab_date1[2]."/".$tab_date1[1]."/".$tab_date1[0];

		if (isset($tab_date[1])) {
			$date.=" à ".$tab_date[1];
		}
	}
	return $date;

}

function formateDateFRtoMYSQL($dateFR) {
	$date="";
	if ($dateFR) {
		$tab_date1 = explode('/',$dateFR);
		$date=$tab_date1[2]."-".$tab_date1[1]."-".$tab_date1[0];
	}

	return $date;

}


?>